CREATE TABLE HISTORY_MOD (
	 	ID         	SERIAL,
        TSTAMP   	TIMESTAMP	DEFAULT now(),
        SCHEMANAME 	TEXT,
        TABNAME    	TEXT,
        OPERATION	TEXT,
		WHO			TEXT	DEFAULT current_user
);
-- Se uso de base este tutorial: cybertec-postgresql.com/en/tracking-changes-in-postgresql/



CREATE FUNCTION change_trigger() 
RETURNS trigger AS $$
BEGIN
	IF      TG_OP = 'INSERT'
	THEN
		INSERT INTO HISTORY_MOD (tabname, schemaname, operation)

				VALUES (TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_OP);

		RETURN NEW;
		
	ELSIF   TG_OP = 'UPDATE'
	THEN
		INSERT INTO HISTORY_MOD (tabname, schemaname, operation)

				VALUES (TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_OP);
		RETURN NEW;
		
	ELSIF   TG_OP = 'DELETE'
	THEN
		INSERT INTO HISTORY_MOD (tabname, schemaname, operation)

				VALUES (TG_TABLE_NAME, TG_TABLE_SCHEMA, TG_OP);

		RETURN OLD;
	END IF;
END;
$$ 
LANGUAGE PLPGSQL;

SELECT p.tablename
FROM pg_tables p
WHERE p.schemaname = 'public'
;


CREATE TRIGGER CAMBIOS_ACTOR
BEFORE INSERT OR UPDATE OR DELETE ON actor
FOR EACH ROW EXECUTE PROCEDURE change_trigger();

CREATE TRIGGER CAMBIOS_ANUNCIOS
BEFORE INSERT OR UPDATE OR DELETE ON anuncios
FOR EACH ROW EXECUTE PROCEDURE change_trigger();

CREATE TRIGGER CAMBIOS_ADBREAK
BEFORE INSERT OR UPDATE OR DELETE ON adbreak
FOR EACH ROW EXECUTE PROCEDURE change_trigger();

CREATE TRIGGER CAMBIOS_PELICULA
BEFORE INSERT OR UPDATE OR DELETE ON pelicula
FOR EACH ROW EXECUTE PROCEDURE change_trigger();

CREATE TRIGGER CAMBIOS_PERFIL
BEFORE INSERT OR UPDATE OR DELETE ON PERFIL
FOR EACH ROW EXECUTE PROCEDURE change_trigger();

CREATE TRIGGER CAMBIOS_USUARIO
BEFORE INSERT OR UPDATE OR DELETE ON usuario
FOR EACH ROW EXECUTE PROCEDURE change_trigger();