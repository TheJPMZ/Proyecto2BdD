
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import login as Login
import createProfile as CProfile
import selectProfile as SProfile
import signIn as Sign

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets")

lista = []

def some_callback(entry):
    entry.config(fg="black")# note that you must include the event as an arg, even if you don't use it.
    entry.delete(0, "end")
    return None

def move(destiny,window, canvas):
    for x in lista:
        x.destroy()
    destiny.run_window(window, canvas)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def run_window(window,canvas):

    canvas.delete("all")

    canvas.create_text(
        40.0,
        34.0,
        anchor="nw",
        text="CREATE PROFILE",
        fill="#F2F2F2",
        font=("Roboto", 36 * -1)
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("return_button.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: move(SProfile, window, canvas),
        relief="flat"
    )
    button_1.place(
        x=40.0,
        y=534.0,
        width=280.0,
        height=55.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("create_button.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_2 clicked"),
        relief="flat"
    )
    button_2.place(
        x=40.0,
        y=460.0,
        width=280.0,
        height=55.0
    )

    image_image_1 = PhotoImage(
        file=relative_to_assets("test_area.png"))
    image_1 = canvas.create_image(
        180.0,
        329.0,
        image=image_image_1
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("text_entry.png"))
    entry_bg_1 = canvas.create_image(
        180.0,
        330.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#F2F2F2",
        highlightthickness=0,
        fg = "grey"
    )
    entry_1.place(
        x=49.0,
        y=313.0,
        width=262.0,
        height=32.0
    )
    entry_1.insert(0, "Profile Name")

    entry_1.bind("<Button-1>", lambda x: some_callback(entry_1))


    image_image_2 = PhotoImage(
        file=relative_to_assets("test_area.png"))
    image_2 = canvas.create_image(
        180.0,
        408.0,
        image=image_image_2
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("text_entry.png"))
    entry_bg_2 = canvas.create_image(
        180.0,
        409.0,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#F2F2F2",
        highlightthickness=0,
        fg = "grey"
    )
    entry_2.place(
        x=49.0,
        y=392.0,
        width=262.0,
        height=32.0
    )

    entry_2.insert(0, "Age")

    entry_2.bind("<Button-1>", lambda x: some_callback(entry_2))


    canvas.create_text(
        56.0,
        313.0,
        anchor="nw",
        text="Username",
        fill="#414059",
        font=("Roboto", 24 * -1)
    )

    canvas.create_text(
        56.0,
        392.0,
        anchor="nw",
        text="Age",
        fill="#414059",
        font=("Roboto", 24 * -1)
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("profile_picture.png"))
    image_3 = canvas.create_image(
        179.0,
        194.0,
        image=image_image_3
    )
    window.resizable(False, False)

    lista.append(button_1)
    lista.append(button_2)
    lista.append(entry_1)
    lista.append(entry_2)

    def Profile(entry):
        name = entry[0].get()
        username = entry[1].get()
        password = entry[2].get()
        email = entry[3].get()
        account = entry[4].get()[:-8]

        if not username.isalpha() or not name.isalpha() or not email.isalpha():
            messagebox.showwarning("alert", "No se permite que se utilicen nombres no alfanumericos")
        else:

            if registro.Registro(username,email,password, name, account):
                variables.gloabl_acc = account
                move(SProfile, window, canvas)
            else:
                messagebox.showwarning("alert", "Usuario existente")




    window.mainloop()

