
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
from pathlib import Path

import psycopg2

import login as Login
import createProfile as CProfile
import selectProfile as SProfile
import signIn as Sign
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import pass_manager as manager
import variables
import admin_func as admin

def some_callback(entry):
    entry.config(fg="black")# note that you must include the event as an arg, even if you don't use it.
    entry.delete(0, "end")
    return None



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets")

lista = []


def move(destiny,window, canvas):
    for x in lista:
        x.destroy()
    destiny.run_window(window, canvas)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def run_window(window,canvas):

    canvas.delete("all")

    button_image_1 = PhotoImage(
        file=relative_to_assets("signup_button.png"))
    button_1 = Button(
        master = canvas,
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command= lambda: move(Sign,window, canvas),
        relief="flat"
    )
    button_1.place(
        x=40.0,
        y=496.0,
        width=280.0,
        height=55.0
    )
    lista.append(button_1)

    button_image_2 = PhotoImage(
        file=relative_to_assets("login_button.png"))
    button_2 = Button (
        master = canvas,
        image = button_image_2,
        borderwidth = 0,
        highlightthickness = 0,
        command = lambda: Get((entry_1,entry_2)),
        relief = "flat"
    )
    button_2.place(
        x=40.0,
        y=422.0,
        width=280.0,
        height=55.0
    )
    lista.append(button_2)

    image_image_1 = PhotoImage(
        file=relative_to_assets("text_area.png"))
    image_1 = canvas.create_image(
        180.0,
        291.0,
        image=image_image_1
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("text_entry.png"))
    entry_bg_1 = canvas.create_image(
        180.0,
        292.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#F2F2F2",
        fg = "grey",
        highlightthickness=0
    )
    entry_1.place(
        x=49.0,
        y=275.0,
        width=262.0,
        height=32.0
    )
    entry_1.insert(0, "Username")

    entry_1.bind("<Button-1>", lambda x: some_callback(entry_1))

    lista.append(entry_1)

    image_image_2 = PhotoImage(
        file=relative_to_assets("text_area.png"))
    image_2 = canvas.create_image(
        180.0,
        370.0,
        image=image_image_2
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("text_entry.png"))
    entry_bg_2 = canvas.create_image(
        180.0,
        371.0,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#F2F2F2",
        fg = "grey",
        highlightthickness=0
    )
    entry_2.place(
        x=49.0,
        y=354.0,
        width=262.0,
        height=32.0
    )
    entry_2.insert(0, "Password")
    
    entry_2.bind("<Button-1>", lambda x: some_callback(entry_2))
    
    lista.append(entry_2)

    canvas.create_text(
        122.0,
        202.0,
        anchor="nw",
        text="LOG IN",
        fill="#F2F2F2",
        font=("Roboto", 36 * -1)
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("logo.png"))
    image_3 = canvas.create_image(
        180.0,
        117.0,
        image=image_image_3
    )

    canvas.create_text(
        56.0,
        275.0,
        anchor="nw",
        text="Username",
        fill="#414059",
        font=("Roboto", 24 * -1)
    )

    canvas.create_text(
        56.0,
        354.0,
        anchor="nw",
        text="Password",
        fill="#414059",
        font=("Roboto", 24 * -1)
    )
    
    def Get(entry):
        e1 = entry[0].get()
        e2 = entry[1].get()
        if manager.check_pass(e1,e2):
            print("Permiso concebido")
            try:
                connection = manager.conexion()
                cursor = connection.cursor()
                postgres_select_query = """ SELECT cusuario, profilename, edad, lognumber, cuenta, cperfil
                                            FROM perfil
                                            NATURAL JOIN usuario
                                            WHERE username = '%s'"""
                cursor.execute(postgres_select_query % e1)
                records = cursor.fetchall()
                print(records)
                tipo_cuenta = records[0][4]
                profiles = 0
                messagebox.showwarning("alert", tipo_cuenta)
                if tipo_cuenta == 'Admin':
                    admin.mainloop()
                    messagebox.showinfo("Admin", "Welcome Admin")
                elif tipo_cuenta == 'Avanzada':
                    profiles = 8
                elif tipo_cuenta == 'Estandar':
                    profiles = 4
                elif tipo_cuenta == 'Gratis' :
                    profiles = 1

                while len(records) > profiles:
                    records.pop()

                variables.global_max_profiles = profiles
                variables.global_user = records[0][0]
                variables.global_profiles = records
            except (Exception, psycopg2.Error) as error:
                print("Error while fetching data from PostgreSQL", error)

            move(SProfile,window, canvas)
        else:
            messagebox.showwarning("alert", "Datos incorrectos")
            print("Incorrecto")
        
    window.resizable(False, False)

    window.mainloop()
    


